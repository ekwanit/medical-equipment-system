# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå
import os
import sys

import streamlit as st
import pandas as pd
import qrcode
import cv2
from PIL import Image
import json
import sqlite3
from datetime import datetime
import numpy as np
from io import BytesIO
import base64
import warnings

# ‡∏õ‡∏¥‡∏î FutureWarning ‡∏Ç‡∏≠‡∏á pandas
warnings.filterwarnings('ignore', category=FutureWarning)
pd.set_option('future.no_silent_downcasting', True)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists('data'):
    os.makedirs('data')

# ‡πÉ‡∏ä‡πâ path ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
DB_PATH = 'data/medical_equipment.db'

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå",
    page_icon="üè•",
    layout="wide"
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
def column_exists(cursor, table_name, column_name):
    try:
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = [row[1] for row in cursor.fetchall()]
        return column_name in columns
    except sqlite3.OperationalError:
        return False

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def init_database():
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipment
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS equipment (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                unit TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á transactions (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id TEXT PRIMARY KEY,
                equipment_id TEXT NOT NULL,
                equipment_name TEXT NOT NULL,
                borrower_name TEXT NOT NULL,
                borrower_dept TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                returned_quantity INTEGER DEFAULT 0,
                remaining_quantity INTEGER NOT NULL,
                unit TEXT NOT NULL,
                date TEXT NOT NULL,
                status TEXT NOT NULL,
                notes TEXT,
                fully_returned BOOLEAN DEFAULT FALSE,
                last_return_date TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (equipment_id) REFERENCES equipment (id)
            )
        ''')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á return_history (‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS return_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                transaction_id TEXT NOT NULL,
                returned_quantity INTEGER NOT NULL,
                return_date TEXT NOT NULL,
                notes TEXT,
                FOREIGN KEY (transaction_id) REFERENCES transactions (id)
            )
        ''')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error)
        columns_to_add = [
            ("returned_quantity", "INTEGER DEFAULT 0"),
            ("remaining_quantity", "INTEGER"),
            ("fully_returned", "BOOLEAN DEFAULT FALSE"),
            ("last_return_date", "TEXT")
        ]
        
        for column_name, column_def in columns_to_add:
            if not column_exists(cursor, "transactions", column_name):
                try:
                    cursor.execute(f"ALTER TABLE transactions ADD COLUMN {column_name} {column_def}")
                    print(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {column_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except sqlite3.OperationalError as e:
                    print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {column_name}: {e}")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå returned ‡πÄ‡∏Å‡πà‡∏≤)
        if column_exists(cursor, "transactions", "returned"):
            try:
                cursor.execute('''
                    UPDATE transactions 
                    SET returned_quantity = CASE WHEN returned = 1 THEN quantity ELSE 0 END,
                        remaining_quantity = CASE WHEN returned = 1 THEN 0 ELSE quantity END,
                        fully_returned = returned
                    WHERE returned_quantity IS NULL OR remaining_quantity IS NULL
                ''')
                print("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å returned column ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except sqlite3.OperationalError as e:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {e}")
        else:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà remaining_quantity ‡πÄ‡∏õ‡πá‡∏ô NULL
            try:
                cursor.execute('''
                    UPDATE transactions 
                    SET remaining_quantity = quantity,
                        returned_quantity = 0,
                        fully_returned = FALSE
                    WHERE remaining_quantity IS NULL
                ''')
                print("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Ñ‡πà‡∏≤ remaining_quantity ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except sqlite3.OperationalError as e:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• remaining_quantity: {e}")
        
        # ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
        cursor.execute("SELECT COUNT(*) FROM equipment")
        if cursor.fetchone()[0] == 0:
            initial_equipment = [
                ("EQ001", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", 10, "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"),
                ("EQ002", "‡∏´‡∏π‡∏ü‡∏±‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", 5, "‡∏≠‡∏±‡∏ô"),
                ("EQ003", "‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå", "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", 15, "‡∏≠‡∏±‡∏ô"),
                ("EQ004", "‡∏ñ‡∏∏‡∏á‡∏°‡∏∑‡∏≠‡∏¢‡∏≤‡∏á", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", 100, "‡∏Ñ‡∏π‡πà"),
                ("EQ005", "‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÄ‡∏à‡∏•", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", 50, "‡∏Ç‡∏ß‡∏î")
            ]
            
            cursor.executemany('''
                INSERT INTO equipment (id, name, category, quantity, unit)
                VALUES (?, ?, ?, ?, ?)
            ''', initial_equipment)
            print("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        conn.commit()
        print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        conn.rollback()
        raise e
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
@st.cache_data
def load_equipment():
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    try:
        df = pd.read_sql_query("SELECT * FROM equipment ORDER BY id", conn)
        return df
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
@st.cache_data
def load_transactions():
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    try:
        df = pd.read_sql_query('''
            SELECT * FROM transactions 
            ORDER BY created_at DESC
        ''', conn)
        return df
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
@st.cache_data
def load_return_history(transaction_id):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    try:
        df = pd.read_sql_query('''
            SELECT * FROM return_history 
            WHERE transaction_id = ?
            ORDER BY return_date DESC
        ''', conn, params=(transaction_id,))
        return df
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
def add_equipment(eq_id, name, category, quantity, unit):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO equipment (id, name, category, quantity, unit)
            VALUES (?, ?, ?, ?, ?)
        ''', (eq_id, name, category, quantity, unit))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    except Exception as e:
        print(f"Error adding equipment: {e}")
        return False
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
def update_equipment_quantity(eq_id, new_quantity):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            UPDATE equipment 
            SET quantity = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (new_quantity, eq_id))
        conn.commit()
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
def withdraw_equipment(transaction_id, equipment_id, equipment_name, borrower_name, 
                      borrower_dept, quantity, unit, notes):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
        cursor.execute('''
            INSERT INTO transactions 
            (id, equipment_id, equipment_name, borrower_name, borrower_dept, 
             quantity, returned_quantity, remaining_quantity, unit, date, status, notes, fully_returned)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (transaction_id, equipment_id, equipment_name, borrower_name, 
              borrower_dept, quantity, 0, quantity, unit, datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
              "‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß", notes, False))
        
        # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        cursor.execute('''
            UPDATE equipment 
            SET quantity = quantity - ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (quantity, equipment_id))
        
        conn.commit()
        return True
    except Exception as e:
        conn.rollback()
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return False
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
def partial_return_equipment(transaction_id, return_quantity, notes=""):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
        cursor.execute('''
            SELECT equipment_id, remaining_quantity, quantity FROM transactions 
            WHERE id = ? AND fully_returned = FALSE
        ''', (transaction_id,))
        
        result = cursor.fetchone()
        if not result:
            return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß"
        
        equipment_id, current_remaining, total_quantity = result
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
        if return_quantity > current_remaining:
            return False, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {current_remaining} ‡∏ä‡∏¥‡πâ‡∏ô)"
        
        if return_quantity <= 0:
            return False, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
        new_returned_quantity = total_quantity - current_remaining + return_quantity
        new_remaining_quantity = current_remaining - return_quantity
        is_fully_returned = new_remaining_quantity == 0
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
        cursor.execute('''
            UPDATE transactions 
            SET returned_quantity = ?,
                remaining_quantity = ?,
                fully_returned = ?,
                last_return_date = ?,
                status = ?
            WHERE id = ?
        ''', (new_returned_quantity, new_remaining_quantity, is_fully_returned,
              datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
              "‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß" if is_fully_returned else "‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô",
              transaction_id))
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
        cursor.execute('''
            INSERT INTO return_history (transaction_id, returned_quantity, return_date, notes)
            VALUES (?, ?, ?, ?)
        ''', (transaction_id, return_quantity, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), notes))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö
        cursor.execute('''
            UPDATE equipment 
            SET quantity = quantity + ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (return_quantity, equipment_id))
        
        conn.commit()
        return True, f"‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {return_quantity} ‡∏ä‡∏¥‡πâ‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {new_remaining_quantity} ‡∏ä‡∏¥‡πâ‡∏ô)"
        
    except Exception as e:
        conn.rollback()
        return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def clear_all_transactions():
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        cursor.execute("DELETE FROM transactions")
        cursor.execute("DELETE FROM return_history")
        conn.commit()
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞
def get_transaction(transaction_id):
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE id = ? AND fully_returned = FALSE
        ''', (transaction_id,))
        
        result = cursor.fetchone()
        
        if result:
            columns = [description[0] for description in cursor.description]
            return dict(zip(columns, result))
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE id = ?
        ''', (transaction_id,))
        
        result = cursor.fetchone()
        
        if result:
            columns = [description[0] for description in cursor.description]
            return dict(zip(columns, result))
        return None
    finally:
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
def generate_qr_code(data):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    return img

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô QR Code ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
def read_qr_code(image):
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á PIL Image ‡πÄ‡∏õ‡πá‡∏ô numpy array
        img_array = np.array(image)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏µ
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û
        gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=0)
        gray = cv2.medianBlur(gray, 5)
        
        # ‡πÉ‡∏ä‡πâ cv2 ‡∏≠‡πà‡∏≤‡∏ô QR Code
        detector = cv2.QRCodeDetector()
        data, vertices_array, binary_qrcode = detector.detectAndDecode(gray)
        
        if vertices_array is not None and data:
            return data
        
        # ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
        data, vertices_array, binary_qrcode = detector.detectAndDecode(thresh)
        
        if vertices_array is not None and data:
            return data
        
        # ‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏µ
        thresh_inv = cv2.bitwise_not(thresh)
        data, vertices_array, binary_qrcode = detector.detectAndDecode(thresh_inv)
        
        if vertices_array is not None and data:
            return data
            
        return None
        
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô QR Code: {str(e)}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
def process_qr_return(qr_data):
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
        transaction_data = json.loads(qr_data)
        transaction_id = transaction_data.get("transaction_id")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
        transaction = get_transaction(transaction_id)
        
        if transaction:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if transaction['fully_returned']:
                st.warning("‚ö†Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß)")
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['id']}")
                    st.write(f"**‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:** {transaction['equipment_name']}")
                    st.write(f"**‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['borrower_name']}")
                    st.write(f"**‡πÅ‡∏ú‡∏ô‡∏Å:** {transaction['borrower_dept']}")
                
                with col2:
                    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['quantity']} {transaction['unit']}")
                    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß:** {transaction['returned_quantity']} {transaction['unit']}")
                    st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['date']}")
                    if transaction.get('last_return_date'):
                        st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {transaction['last_return_date']}")
                
                return
            
            # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö
            st.success("‚úÖ ‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö!")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['id']}")
                st.write(f"**‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:** {transaction['equipment_name']}")
                st.write(f"**‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['borrower_name']}")
                st.write(f"**‡πÅ‡∏ú‡∏ô‡∏Å:** {transaction['borrower_dept']}")
            
            with col2:
                st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['quantity']} {transaction['unit']}")
                st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß:** {transaction['returned_quantity']} {transaction['unit']}")
                st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠:** {transaction['remaining_quantity']} {transaction['unit']}")
                st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['date']}")
                if transaction.get('notes'):
                    st.write(f"**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** {transaction['notes']}")
            
            # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
            st.subheader("üîÑ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
            
            with st.form("return_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    return_quantity = st.number_input(
                        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {transaction['remaining_quantity']} {transaction['unit']})",
                        min_value=1,
                        max_value=transaction['remaining_quantity'],
                        value=min(1, transaction['remaining_quantity'])
                    )
                
                with col2:
                    return_notes = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô", placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
                
                # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∑‡∏ô
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    partial_return_submitted = st.form_submit_button("üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", type="primary")
                
                with col_btn2:
                    full_return_submitted = st.form_submit_button("üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", type="secondary")
                
                if partial_return_submitted or full_return_submitted:
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
                    qty_to_return = transaction['remaining_quantity'] if full_return_submitted else return_quantity
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
                    success, message = partial_return_equipment(transaction_id, qty_to_return, return_notes)
                    
                    if success:
                        st.success(f"‚úÖ {message}")
                        st.balloons()
                        st.cache_data.clear()
                        st.rerun()
                    else:
                        st.error(f"‚ùå {message}")
        
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
    
    except json.JSONDecodeError:
        st.error("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
try:
    init_database()
except Exception as e:
    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üè• ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå")

# ‡∏õ‡∏∏‡πà‡∏° Refresh
col1, col2, col3 = st.columns([1, 1, 8])
with col1:
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä", help="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        st.cache_data.clear()
        st.rerun()

with col2:
    st.caption(f"üïê ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

st.markdown("---")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å")
menu = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
    ["üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "üì§ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "üì± ‡∏™‡πÅ‡∏Å‡∏ô QR Code", "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö"]
)

# ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
if menu == "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠":
    st.header("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
    df_equipment = load_equipment()
    df_transactions = load_transactions()
    
    if not df_equipment.empty:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        not_returned = df_transactions[df_transactions['fully_returned'] == False].groupby('equipment_id')['remaining_quantity'].sum().reset_index()
        not_returned.columns = ['id', 'borrowed_quantity']
        
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        df_display = df_equipment.merge(not_returned, on='id', how='left')
        df_display['borrowed_quantity'] = df_display['borrowed_quantity'].fillna(0)
        df_display['borrowed_quantity'] = df_display['borrowed_quantity'].astype(int)
        df_display['total_quantity'] = df_display['quantity'] + df_display['borrowed_quantity']
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        display_cols = df_display[['id', 'name', 'category', 'total_quantity', 'quantity', 'borrowed_quantity', 'unit']].copy()
        display_cols.columns = ["‡∏£‡∏´‡∏±‡∏™", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", "‡∏´‡∏ô‡πà‡∏ß‡∏¢"]
        
        st.dataframe(display_cols, use_container_width=True)
        
        # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        st.info("üí° **‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° = ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ + ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô)")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", len(df_equipment))
        with col2:
            total_items = df_display['total_quantity'].sum()
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_items)
        with col3:
            available_items = df_display['quantity'].sum()
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", available_items)
        with col4:
            borrowed_items = df_display['borrowed_quantity'].sum()
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", borrowed_items)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")

# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
elif menu == "üì§ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠":
    st.header("üì§ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
    
    # ‡πÉ‡∏ä‡πâ session state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
    if 'withdrawal_success' not in st.session_state:
        st.session_state.withdrawal_success = False
        st.session_state.transaction_data = None

    with st.form("withdrawal_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å
            borrower_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å", placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å")
            borrower_dept = st.text_input("‡πÅ‡∏ú‡∏ô‡∏Å", placeholder="‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î")
            
        with col2:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å
            df_equipment = load_equipment()
            available_equipment = df_equipment[df_equipment['quantity'] > 0]
            
            if not available_equipment.empty:
                equipment_options = [
                    f"{row['id']} - {row['name']} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {row['quantity']} {row['unit']})" 
                    for _, row in available_equipment.iterrows()
                ]
                
                selected_equipment = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", equipment_options)
                quantity = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", min_value=1, value=1)
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ")
                equipment_options = []
        
        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        notes = st.text_area("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
        submitted = st.form_submit_button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", type="primary")
        
        if submitted and equipment_options:
            if borrower_name and borrower_dept:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                equipment_id = selected_equipment.split(" - ")[0]
                equipment_row = df_equipment[df_equipment['id'] == equipment_id].iloc[0]
                
                if equipment_row['quantity'] >= quantity:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
                    transaction_id = f"TX{datetime.now().strftime('%Y%m%d%H%M%S')}"
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
                    success = withdraw_equipment(
                        transaction_id, equipment_id, equipment_row['name'],
                        borrower_name, borrower_dept, quantity, equipment_row['unit'], notes
                    )
                    
                    if success:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
                        qr_data = json.dumps({
                            "transaction_id": transaction_id,
                            "equipment_id": equipment_id,
                            "quantity": quantity,
                            "borrower": borrower_name
                        })
                        qr_img = generate_qr_code(qr_data)
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
                        st.session_state.withdrawal_success = True
                        st.session_state.transaction_data = {
                            "id": transaction_id,
                            "equipment_name": equipment_row['name'],
                            "borrower_name": borrower_name,
                            "borrower_dept": borrower_dept,
                            "quantity": quantity,
                            "unit": equipment_row['unit'],
                            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "notes": notes
                        }
                        st.session_state.qr_img = qr_img
                        
                        # Clear cache
                        st.cache_data.clear()
                        st.success("‚úÖ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        st.rerun()
                    
                else:
                    st.error("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠!")
            else:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ô‡∏≠‡∏Å form)
    if st.session_state.withdrawal_success and st.session_state.transaction_data:
        transaction = st.session_state.transaction_data
        qr_img = st.session_state.qr_img
        
        st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å")
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.write(f"**‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['id']}")
            st.write(f"**‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:** {transaction['equipment_name']}")
            st.write(f"**‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å:** {transaction['borrower_name']}")
            st.write(f"**‡πÅ‡∏ú‡∏ô‡∏Å:** {transaction['borrower_dept']}")
            st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:** {transaction['quantity']} {transaction['unit']}")
            st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {transaction['date']}")
            if transaction['notes']:
                st.write(f"**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** {transaction['notes']}")
        
        with col2:
            st.write("**QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô:**")
            
            # ‡πÅ‡∏õ‡∏•‡∏á PIL Image ‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit
            buf = BytesIO()
            qr_img.save(buf, format='PNG')
            buf.seek(0)
            
            # ‡πÅ‡∏™‡∏î‡∏á QR Code
            st.image(buf.getvalue(), width=200)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏ô‡∏≠‡∏Å form)
        buf.seek(0)
        st.download_button(
            label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR Code",
            data=buf.getvalue(),
            file_name=f"QR_{transaction['id']}.png",
            mime="image/png",
            key="download_qr"
        )
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
        if st.button("üîÑ ‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà", key="new_withdrawal"):
            st.session_state.withdrawal_success = False
            st.session_state.transaction_data = None
            st.session_state.qr_img = None
            st.rerun()

        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô QR Code
        st.info("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** QR Code ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏∑‡∏ô 2 ‡∏ä‡∏¥‡πâ‡∏ô‡∏à‡∏≤‡∏Å 10 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ QR Code ‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏µ‡∏Å 3 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code
elif menu == "üì± ‡∏™‡πÅ‡∏Å‡∏ô QR Code":
    st.header("üì± ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    input_method = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code:",
        ["‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ QR Code", "‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"]
    )
    
    if input_method == "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ QR Code":
        # ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        uploaded_file = st.file_uploader(
            "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ QR Code", 
            type=['png', 'jpg', 'jpeg'],
            help="‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ QR Code ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠"
        )
        
        if uploaded_file is not None:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
            image = Image.open(uploaded_file)
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.image(image, caption="‡∏£‡∏π‡∏õ QR Code ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î", width=300)
            
            with col2:
                # ‡∏≠‡πà‡∏≤‡∏ô QR Code
                qr_data = read_qr_code(image)
                
                if qr_data:
                    process_qr_return(qr_data)
                else:
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    
    else:  # ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        st.info("üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:** ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß Copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        with st.expander("üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠"):
            st.markdown("""
            **iPhone:**
            - ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û Camera ‚Üí ‡∏™‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà QR Code ‚Üí ‡πÅ‡∏ï‡∏∞ notification ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è
            - ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏î‡∏•‡∏á Control Center ‚Üí ‡πÅ‡∏ï‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô QR Code
            
            **Android:**
            - ‡πÉ‡∏ä‡πâ Google Lens: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û Google ‚Üí ‡πÅ‡∏ï‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô Lens ‚Üí ‡∏™‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà QR Code
            - ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û Camera ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î QR Code/Barcode
            
            **‡πÅ‡∏≠‡∏û‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
            - QR Code Reader (‡∏ü‡∏£‡∏µ)
            - Google Lens
            - LINE (‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏Å‡∏ô QR Code)
            """)
        
        # ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
        qr_text_input = st.text_area(
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ:",
            placeholder="‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...",
            height=100
        )
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô", type="primary"):
            if qr_text_input.strip():
                process_qr_return(qr_text_input.strip())
            else:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        st.markdown("---")
        st.subheader("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        if st.button("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á"):
            test_data = '{"transaction_id": "TX20250611162200", "equipment_id": "EQ005", "quantity": 10, "borrower": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö"}'
            st.text_area("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Copy ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô):", test_data, height=100)
            st.info("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** Copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
elif menu == "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
    st.header("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
    df_transactions = load_transactions()
    
    if not df_transactions.empty:
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
        col1, col2, col3, col4 = st.columns(4)
        
        total_transactions = len(df_transactions)
        fully_returned_count = len(df_transactions[df_transactions['fully_returned'] == True])
        partial_returned_count = len(df_transactions[(df_transactions['returned_quantity'] > 0) & (df_transactions['fully_returned'] == False)])
        not_returned_count = len(df_transactions[df_transactions['returned_quantity'] == 0])
        
        with col1:
            st.metric("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", total_transactions)
        with col2:
            st.metric("‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß", fully_returned_count)
        with col3:
            st.metric("‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", partial_returned_count)
        with col4:
            st.metric("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô", not_returned_count)
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Ñ‡∏∑‡∏ô
        st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Ñ‡∏∑‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        
        display_columns = [
            "id", "equipment_name", "borrower_name", "borrower_dept", 
            "quantity", "returned_quantity", "remaining_quantity", "unit", "date", "status", "notes"
        ]
        
        df_display = df_transactions[display_columns].copy()
        df_display.columns = [
            "‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å", "‡πÅ‡∏ú‡∏ô‡∏Å", 
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏´‡∏ô‡πà‡∏ß‡∏¢", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
        ]
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_filter = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß"])
        
        if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            df_display = df_display[df_display["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_filter]
        
        st.dataframe(df_display, use_container_width=True)
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            status_counts = df_transactions['status'].value_counts()
            if not status_counts.empty:
                import plotly.express as px
                fig_pie = px.pie(
                    values=status_counts.values, 
                    names=status_counts.index,
                    title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Ñ‡∏∑‡∏ô"
                )
                st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            equipment_counts = df_transactions['equipment_name'].value_counts().head(10)
            if not equipment_counts.empty:
                fig_bar = px.bar(
                    x=equipment_counts.values,
                    y=equipment_counts.index,
                    orientation='h',
                    title="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 10)",
                    labels={'x': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'y': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'}
                )
                fig_bar.update_layout(yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig_bar, use_container_width=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô")
        
        partial_returns = df_transactions[df_transactions['returned_quantity'] > 0]
        if not partial_returns.empty:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                total_borrowed = partial_returns['quantity'].sum()
                st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡∏£‡∏ß‡∏°", total_borrowed)
            
            with col2:
                total_returned = partial_returns['returned_quantity'].sum()
                st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß", total_returned)
            
            with col3:
                total_remaining = partial_returns['remaining_quantity'].sum()
                st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠", total_remaining)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
        df_export = df_transactions[display_columns].copy()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        df_export['status_eng'] = df_export['status'].map({
            '‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß': 'Not Returned',
            '‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô': 'Partial Return', 
            '‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß': 'Fully Returned'
        })
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        df_export['date_formatted'] = pd.to_datetime(df_export['date']).dt.strftime('%d/%m/%Y %H:%M')
        
        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
        df_export = df_export[['id', 'equipment_name', 'borrower_name', 'borrower_dept', 
                              'quantity', 'returned_quantity', 'remaining_quantity', 
                              'unit', 'date_formatted', 'status_eng', 'notes']].copy()
        
        df_export.columns = [
            "Transaction_ID", "Equipment_Name", "Borrower_Name", "Department", 
            "Total_Quantity", "Returned_Quantity", "Remaining_Quantity", 
            "Unit", "Borrow_Date", "Status", "Notes"
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # Sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
            df_export.to_excel(writer, sheet_name='‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Ñ‡∏∑‡∏ô', index=False)
            
            # Sheet ‡∏™‡∏£‡∏∏‡∏õ
            summary_data = {
                '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': ['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô'],
                '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': [total_transactions, fully_returned_count, partial_returned_count, not_returned_count]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='‡∏™‡∏£‡∏∏‡∏õ', index=False)
        
        output.seek(0)
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
        st.download_button(
            label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Excel)",
            data=output.getvalue(),
            file_name=f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå_{datetime.now().strftime('%Y-%m-%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
        csv_simple = df_export.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (CSV)",
            data=csv_simple,
            file_name=f"medical_equipment_report_{datetime.now().strftime('%Y-%m-%d')}.csv",
            mime="text/csv"
        )
    
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö
elif menu == "‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö":
    st.header("‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö")
    
    tab1, tab2, tab3, tab4 = st.tabs(["‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])
    
    with tab1:
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà")
        
        with st.form("add_equipment"):
            col1, col2 = st.columns(2)
            
            with col1:
                new_id = st.text_input("‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", placeholder="‡πÄ‡∏ä‡πà‡∏ô EQ006")
                new_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå")
            
            with col2:
                new_category = st.text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", placeholder="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
                col_qty, col_unit = st.columns(2)
                with col_qty:
                    new_quantity = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=0, value=1)
                with col_unit:
                    new_unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡∏≠‡∏±‡∏ô")
            
            if st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠", type="primary"):
                if new_id and new_name and new_category and new_unit:
                    if add_equipment(new_id, new_name, new_category, new_quantity, new_unit):
                        st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        st.cache_data.clear()
                        st.rerun()
                    else:
                        st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≥!")
                else:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
    
    with tab2:
        st.subheader("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
        
        df_equipment = load_equipment()
        if not df_equipment.empty:
            equipment_options = [f"{row['id']} - {row['name']}" for _, row in df_equipment.iterrows()]
            equipment_to_edit = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
                equipment_options
            )
            
            if equipment_to_edit:
                equipment_id = equipment_to_edit.split(" - ")[0]
                equipment_row = df_equipment[df_equipment['id'] == equipment_id].iloc[0]
                
                new_qty = st.number_input(
                    f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {equipment_row['quantity']} {equipment_row['unit']})",
                    min_value=0,
                    value=int(equipment_row['quantity'])
                )
                
                if st.button("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", type="primary"):
                    update_equipment_quantity(equipment_id, new_qty)
                    st.success("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.cache_data.clear()
                    st.rerun()
    
    with tab3:
        st.subheader("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!")
        
        if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", type="secondary"):
            clear_all_transactions()
            st.success("‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!")
            st.cache_data.clear()
            st.rerun()
    
    with tab4:
        st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect(DB_PATH, timeout=30.0)
        
        try:
            # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if os.path.exists(DB_PATH):
                db_size = os.path.getsize(DB_PATH) / 1024  # KB
                st.metric("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", f"{db_size:.2f} KB")
            else:
                st.metric("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
                for table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table[0]}")
                    count = cursor.fetchone()[0]
                    st.write(f"- {table[0]}: {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            with col2:
                # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                st.write("**‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á transactions:**")
                cursor.execute("PRAGMA table_info(transactions)")
                trans_info = cursor.fetchall()
                for info in trans_info:
                    st.write(f"- {info[1]} ({info[2]})")
        finally:
            conn.close()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.markdown("---")
        st.subheader("üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if os.path.exists(DB_PATH):
            with open(DB_PATH, 'rb') as f:
                db_data = f.read()
            
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                data=db_data,
                file_name=f"medical_equipment_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db",
                mime="application/octet-stream"
            )
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
        st.markdown("---")
        st.subheader("üì§ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô!")
        
        uploaded_db = st.file_uploader(
            "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á", 
            type=['db']
        )
        
        if uploaded_db is not None:
            if st.button("üîÑ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="secondary"):
                try:
                    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                    if os.path.exists(DB_PATH):
                        import shutil
                        backup_path = f'data/medical_equipment_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
                        shutil.copy(DB_PATH, backup_path)
                    
                    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                    with open(DB_PATH, 'wb') as f:
                        f.write(uploaded_db.read())
                    
                    st.success("‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.cache_data.clear()
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# Footer
st.markdown("---")
st.markdown("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô QR Code ‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö")
st.markdown("üîß **‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢:** ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå (Version 2.0)")
st.markdown("üóÑÔ∏è **‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:** SQLite")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
try:
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    conn.close()
    st.sidebar.success("üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    st.sidebar.error(f"üî¥ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
